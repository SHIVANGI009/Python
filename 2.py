# -*- coding: utf-8 -*-
"""2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jatxo2jb5UpJbUHapYCiYBBBcv0xYyYj
"""

def func(nums):
  mylist={}
  for i in nums:
    if i in mylist:
      return True
    else:
      mylist[i]=1
  return False
func([1,2,3,1])

def func1(nums,target):
  for i in range(0,len(nums)):
    for j in range(1,len(nums)):
      if nums[i]+nums[j]==target:
        return [i,j]
func1([1,2,3,4],6)

def func2(n):
  a=0
  b=1
  count=0
  if(n==1):
    return a
  else:
    print('Fibonacci Series')
  while(count<n):
    print(a,end=' ')
    c=a+b
    a=b
    b=c
    count+=1
func2(6)

import collections as c

c.Counter()

from collections import Counter

mylist=[1,2,3,4,1]
a=Counter(mylist)
print(type(a))
a.update([5,6])
print(a)
a.most_common(2)
list(a.elements())

from collections import defaultdict

from collections import OrderedDict

o=OrderedDict()
o['a']=10
o['b']=20
o['c']=30
o.move_to_end('b',last=False)
print(o)

from collections import namedtuple

a= namedtuple('Point',['x','y'])
p= a(11,21)
print(p.x)
print(p[0])

p._asdict()
p=p._replace(x=51)
print(p)

a= namedtuple('Point',['x','y'])
x=defaultdict()
print(x)

# deque -> double ended queue
# it support thread safe
# its performance are good because its work in O(1)

from collections import deque

dq= deque(['shivangi','abc','xyz','11'])

dq.append(21)

dq.appendleft(1)
print(dq)

